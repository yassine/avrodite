{# @pebvariable name="context" type="org.avrodite.avro.result.TemplateContext"#}
{# @pebvariable name="test" type="org.avrodite.avro.result.TestRepresentation"#}
## Benchmark Results

#### Test description

The benchmark attempts to capture the end-to-end latency for serialization/deserialization,
like so (in pseudo-code):

```
benchmark() {
  serialize(deserialize(fixture))
}
```

We run {{ context.tests.size() }} tests:
{% for xtest in context.tests %}
{% set test = xtest %}
{{ loop.index + 1 }}. Test {{ loop.index + 1 }} ({{ test.id }}): {{ test.description }}

{% endfor %}

The tests classes are available under the 'avrodite-codec-avro-benchmarks' module.

#### Test Environment

| Component | Description                              |
|-----------|------------------------------------------|
| Processor | Intel(R) Core(TM) i7-6900K CPU @ 3.20GHz |
| Linux     | 5.3.0-29-generic                         |
| JDK       | {{ context.model.vmName }} {{ context.model.vmVersion }}       |
| JVM Args  | {{ context.model.jvmArgsList() }}   |


##### Tested Frameworks

| Framework              | Version    |
|------------------------|------------|
| Avro Core              | 1.8.1      |
| Avrodite               | 0.1.0      |
| Jackson Avro           | 2.8.5      |
| Jackson JSON           | 2.8.5      |
| Protocol Buffers       | 3.11.3     |

#### Results Summary

##### Throughput
{% set test = context.tests[0] %}
| Framework | {% for xtest in context.tests %}{% set test = xtest %}{{ test.throughputMetric.title }} | {{ test.id  }} relative perf. |{% endfor %}

|-----------|{% for xtest in context.tests %}{% set test = xtest %}------------|--------------|{% endfor %}

{% set frameworks = test.throughputMetric.frameworks() %}
{% for framework in frameworks %}
| {{ framework }} | {% for xtest in context.tests %}{% set test = xtest %}{{ test.throughputMetric.metricOfFramework(framework)  }} | {{ test.throughputMetric.relativePerformanceMap[framework]  }} | {% endfor %}

{% endfor %}


##### Heap Usage

{% set test = context.tests[0] %}
| Framework | {% for xtest in context.tests %}{% set test = xtest %}{{ test.heapAllocationRate.title }} | {{ test.id  }} relative perf. |{% endfor %}

|-----------|{% for xtest in context.tests %}{% set test = xtest %}------------|--------------|{% endfor %}

{% set frameworks = test.heapAllocationRate.frameworks() %}
{% for framework in frameworks %}
| {{ framework }} | {% for xtest in context.tests %}{% set test = xtest %}{{ test.heapAllocationRate.metricOfFramework(framework)  }} | {{ test.heapAllocationRate.relativePerformanceMap[framework]  }} | {% endfor %}

{% endfor %}

#### Results Charts
{% for xtest in context.tests %}
{% set test = xtest %}

### {{ test.throughputMetric.title }}

(Higher is better)

![Alt text](./images/{{ test.throughputMetric.imageName() }}?raw=true "{{ test.throughputMetric.title }}")

### {{ test.heapAllocationRate.title }}

(Lower is better)

![Alt text](./images/{{ test.heapAllocationRate.imageName() }}?raw=true "{{ test.heapAllocationRate.title }}")

{% endfor %}



##### Test Fixture (in JSON)
```json
{
  "meta" : {
    "id" : "471373af-dc25-459d-bdb5-2318edbf7074",
    "parentId" : "f453e8d8-ab9a-493e-bad3-b23eac518732",
    "correlation" : "1be7f862-37e9-4fce-901e-12435ceb2776"
  },
  "target" : {
    "ticker" : "TICKER",
    "price" : 124.214,
    "volume" : 125855214,
    "variation" : -0.0112
  },
  "bid" : [ {
    "count" : 1,
    "price" : 123.59293,
    "quantity" : 200000
  }, {
    "count" : 2,
    "price" : 122.97185999999999,
    "quantity" : 300000
  }, {
    "count" : 3,
    "price" : 122.35079,
    "quantity" : 400000
  }, {
    "count" : 4,
    "price" : 121.72972,
    "quantity" : 500000
  }, {
    "count" : 5,
    "price" : 121.10865,
    "quantity" : 600000
  } ],
  "ask" : [ {
    "count" : 1,
    "price" : 124.83506999999999,
    "quantity" : 10000
  }, {
    "count" : 2,
    "price" : 125.45614,
    "quantity" : 20000
  }, {
    "count" : 3,
    "price" : 126.07720999999998,
    "quantity" : 30000
  }, {
    "count" : 4,
    "price" : 126.69828,
    "quantity" : 40000
  }, {
    "count" : 5,
    "price" : 127.31934999999999,
    "quantity" : 50000
  } ]
}
```
#### Use Case 1 : Nullable Fields Schema
```json
{
  "type" : "record",
  "name" : "EquityMarketPriceEvent__BA13F0BA",
  "namespace" : "org.avrodite.fixtures.event",
  "fields" : [ {
    "name" : "meta",
    "type" : [ {
      "type" : "record",
      "name" : "EventMeta__7C3A6F98",
      "fields" : [ {
        "name" : "id",
        "type" : [ "string", "null" ]
      }, {
        "name" : "parentId",
        "type" : [ "string", "null" ]
      }, {
        "name" : "correlation",
        "type" : [ "string", "null" ]
      } ],
      "org.avrodite.avro.javaType" : "org.avrodite.fixtures.event.EventMeta"
    }, "null" ]
  }, {
    "name" : "target",
    "type" : [ {
      "type" : "record",
      "name" : "Equity__862C9147",
      "fields" : [ {
        "name" : "ticker",
        "type" : [ "string", "null" ]
      }, {
        "name" : "price",
        "type" : [ "double", "null" ]
      }, {
        "name" : "volume",
        "type" : [ "long", "null" ]
      }, {
        "name" : "variation",
        "type" : [ "double", "null" ]
      } ],
      "org.avrodite.avro.javaType" : "org.avrodite.fixtures.event.Equity"
    }, "null" ]
  }, {
    "name" : "bid",
    "type" : [ {
      "type" : "array",
      "items" : {
        "type" : "record",
        "name" : "EquityOrder__D2EFF3F5",
        "fields" : [ {
          "name" : "count",
          "type" : [ "int", "null" ]
        }, {
          "name" : "price",
          "type" : [ "double", "null" ]
        }, {
          "name" : "quantity",
          "type" : [ "long", "null" ]
        } ],
        "org.avrodite.avro.javaType" : "org.avrodite.fixtures.event.EquityOrder"
      }
    }, "null" ]
  }, {
    "name" : "ask",
    "type" : [ {
      "type" : "array",
      "items" : "EquityOrder__D2EFF3F5"
    }, "null" ]
  } ],
  "org.avrodite.avro.javaType" : "org.avrodite.fixtures.event.EquityMarketPriceEvent"
}
```
#### Use Case 2 : Non Nullable Fields Schema
```
{
  "type" : "record",
  "name" : "EquityMarketPriceEvent__BA13F0BA",
  "namespace" : "org.avrodite.fixtures.event",
  "fields" : [ {
    "name" : "meta",
    "type" : {
      "type" : "record",
      "name" : "EventMeta__7C3A6F98",
      "fields" : [ {
        "name" : "id",
        "type" : "string"
      }, {
        "name" : "parentId",
        "type" : "string"
      }, {
        "name" : "correlation",
        "type" : "string"
      } ],
      "org.avrodite.avro.javaType" : "org.avrodite.fixtures.event.EventMeta"
    }
  }, {
    "name" : "target",
    "type" : {
      "type" : "record",
      "name" : "Equity__862C9147",
      "fields" : [ {
        "name" : "ticker",
        "type" : "string"
      }, {
        "name" : "price",
        "type" : "double"
      }, {
        "name" : "volume",
        "type" : "long"
      }, {
        "name" : "variation",
        "type" : "double"
      } ],
      "org.avrodite.avro.javaType" : "org.avrodite.fixtures.event.Equity"
    }
  }, {
    "name" : "bid",
    "type" : {
      "type" : "array",
      "items" : {
        "type" : "record",
        "name" : "EquityOrder__D2EFF3F5",
        "fields" : [ {
          "name" : "count",
          "type" : "int"
        }, {
          "name" : "price",
          "type" : "double"
        }, {
          "name" : "quantity",
          "type" : "long"
        } ],
        "org.avrodite.avro.javaType" : "org.avrodite.fixtures.event.EquityOrder"
      }
    }
  }, {
    "name" : "ask",
    "type" : {
      "type" : "array",
      "items" : "EquityOrder__D2EFF3F5"
    }
  } ],
  "org.avrodite.avro.javaType" : "org.avrodite.fixtures.event.EquityMarketPriceEvent"
}
```
